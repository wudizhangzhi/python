#!/usr/bin/python
# coding=utf8

import Queue
import os
import sys
from threading import Thread
from controller.login_controller import LoginController
from controller.bye_controller import ByeController
from controller.process_controller import ProcessController
from controller.main_controller import MainController
from view.base_view import BaseView
from utils.methods import *
import sqlite3
import subprocess
import time
import logging

# logging
logging.basicConfig(level=logging.DEBUG,
                    format='%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s',
                    datefmt='%a, %d %b %y %H:%M:%S',
                    filename='myapp.log',
                    filemode='w')


# 百度apikey
apikey = 'b3bddbfd7081688c8c2f985e523a1d0a'

'''
欢迎界面
主界面：选择，进入，开始
具体文件界面：选择
输入目录界面：输入目录
输出界面：显示进度条
'''
# 完成提示
done_msg = "\033[31m (๑•̀ㅂ•́)و✧ \033[0m" + "\t\033[36m 复制完成! \033[m"

welcome = [
    '     #####   #     #  #######  #######  ######    #####   ######      #',
    '    #     #  #     #  #        #        #     #  #     #  #     #    # #',
    '    #        #     #  #        #        #     #  #        #     #   #   #',
    '    #        #######  #####    #####    ######    #####   #     #  #     #',
    '    #        #     #  #        #        #   #          #  #     #  #######',
    '    #     #  #     #  #        #        #    #   #     #  #     #  #     #',
    '     #####   #     #  #######  #######  #     #   #####   ######   #     #',
    '\n',
    '                            #        #######   #####',
    '                            #        #     #  #     #',
    '                            #        #     #  #',
    '                            #        #     #  #  ####',
    '                            #        #     #  #     #',
    '                            #        #     #  #     #',
    '                            #######  #######   #####',
    '\n',
    '    #######  #######  ######   #######  #     #   #####   ###   #####    #####',
    '    #        #     #  #     #  #        ##    #  #     #   #   #     #  #     #',
    '    #        #     #  #     #  #        # #   #  #         #   #        #',
    '    #####    #     #  ######   #####    #  #  #   #####    #   #         #####',
    '    #        #     #  #   #    #        #   # #        #   #   #              #',
    '    #        #     #  #    #   #        #    ##  #     #   #   #     #  #     #',
    '    #        #######  #     #  #######  #     #   #####   ###   #####    #####',
    '\n',
    '                           http://www.cheersdata.com/'
]
# 欢迎界面显示时间
time_welcome = 3


class QQ(object):
    '''
    '''

    def __init__(self):
        uid = os.getuid()
        if uid != 0:
            print '请使用root用户操作'
            sys.exit(-1)
        self.welcome()
        self.quit_quit = False
        self.switch_queue = Queue.Queue(0)
        self.view_control_map = {
            'login': LoginController(),
            'bye': ByeController(),
            'main': MainController(),
        }
        self._init_db()
        logging.info('程序开始')
        Thread(target=self._watchdog_switch).start()

    def welcome(self):
        # 欢迎界面
        height, width = BaseView().linesnum()
        print '\r'
        top_margin = (height - len(welcome)) / 2
        left_margin = (width - len(welcome[-4])) / 2
        print '\n' * top_margin
        for i in welcome:
            print ' ' * left_margin + i
        print '\n' * (height - top_margin - len(welcome))
        # 欢迎界面结束
        time.sleep(time_welcome)

    def _init_db(self):
        db = sqlite3.connect('db/loginfo.db')
        cur = db.cursor()
        cur.execute('DROP TABLE IF EXISTS log_select')
        cur.execute('CREATE TABLE IF NOT EXISTS log_select(name TEXT)')
        db.commit()
        cur.close()
        db.close()

    def _watchdog_switch(self):
        '''
        切换页面线程
        '''
        self.view_control_map['main'].run(self.switch_queue)

        while not self.quit_quit:
            try:
                key = self.switch_queue.get()
                if key == 'quit_quit':
                    self.quit_quit = True
                elif key == 'rawinput':# 输出所有文件
                    logging.info('输出所有文件 开始')
                    try:
                        # backdir = raw_input('请输入要保存的路径: ')
                        backdir = raw_input('\033[41m请输入要保存的目录名称:\033[m    ')

                    except KeyboardInterrupt:
                        print "\t\033[41m 程序终止! \033[m\n"

                    try: 

                        if backdir == '':
                            backdir = '../__save'
                        if backdir.endswith('/'):
                            backdir = backdir[::-1]
                        now = time.strftime('%Y_%m_%d_%H_%M_%S', time.localtime())
                        backdir = '../' + backdir + '/' + now
                        # 进度条
                        base = BaseView()
                        screen_height, screen_width = base.linesnum()
                        content = ['']
                        per = 0
                        # 进度条线程
                        def thread_display():
                            while True:
                                try:
                                    display_lines = ['\r']
                                    display_lines.append('正在复制' + '\r')
                                    display_lines.append('')
                                    # length = len(content)
                                    # 显示正在复制的内容
                                    c = content
                                    half = screen_height / 2
                                    if len(c) > half:
                                        c = c[-half:]
                                    for i in c:
                                        display_lines.append(i)

                                    if per == 100:
                                        pass
                                    else:
                                        display_lines.append('\t\033[36m 完成:' + str(per) + '%\033[m')
                                    display_lines.append('')
                                    for i in range(screen_height - len(display_lines) - 10):
                                        display_lines.append('')
                                    pos = screen_width * per / 100 - 1
                                    if pos < 1:
                                        pos = 1
                                    display_lines.append('=' * pos + '>')
                                    display_lines.append('')
                                    display_lines.append('')
                                    if per == 100:
                                        display_lines.append('')
                                        display_lines.append(' ' * (screen_width / 2 - len(done_msg) / 3) + done_msg)
                                    else:
                                        display_lines.append('')
                                        display_lines.append('')
                                    display_lines.append('')
                                    display_lines.append('')
                                    display_lines.append('')
                                    display_lines.append('\r')
                                    print '\n'.join(display_lines)
                                    if per == 100:
                                        break
                                    time.sleep(0.5)
                                except Exception,e:
                                    print e
                                    logging.debug(e)
                                    break

                        Thread(target=thread_display).start()
                        
                        logging.info('读取选择的文件')
                        db = sqlite3.connect('db/loginfo.db')
                        cur = db.cursor()
                        cur.execute('SELECT * FROM log_select')
                        all_log = cur.fetchall()
                        # 
                        total = len(all_log)
                        logging.info('选择的文件共：%s' % total)
                        num = 0
                        for filelog in all_log:
                            copyfile(filelog[0], backdir)
                            basename = os.path.basename(filelog[0])
                            dirname = os.path.dirname(filelog[0])
                            targetname = backdir + dirname + '/' + basename
                            content.append('复制 ' + str(filelog[0]) + ' --> ' + str(targetname))
                            logging.info('复制 ' + str(filelog[0]) + ' --> ' + str(targetname))
                            num += 1
                            per = num * 100 / total
                            # TODO delete
                            time.sleep(0.1)
                        per = 100
                        logging.info('输出所有文件 结束')
                        self.initsysteminfo(backdir)
                        time.sleep(1)
                    except Exception,e:
                        print e
                        logging.debug(e)
                    break
                else:
                    self.view_control_map[key].run(self.switch_queue)
            except Exception, e:
                print e
                logging.debug('程序结束')
                break
        # self.quit()
        logging.info('输出所有文件 结束')
        os._exit(0)

    def quit(self):
        '''
        退出
        '''
        subprocess.call('echo -e "\033[?25h";clear', shell=True)

    def initsysteminfo(self, backdir):
        try:
            logging.info('开始生成系统信息文件')
            memuse, memtotal = calcMemUsage()
            import platform
            p = subprocess.Popen('cat /proc/cpuinfo | grep "^model name" | head -1 | awk -F ":" \'{print $2}\'',
                                 stdout=subprocess.PIPE, shell=True)
            ret = p.communicate()
            infos = []
            if ret:
                for info in set(re.sub(r' ', '', ret[0]).split('\n')):
                    if info:
                        infos.append(info)

            p = subprocess.Popen('cat /etc/issue.net | head -1',
                                 stdout=subprocess.PIPE, shell=True)
            ret = p.communicate()
            if ret[0]:
                sysinfo = ret[0].strip()
            else:
                sysinfo = ' '.join(platform.linux_distribution())

            line2 = '系统版本: ' + sysinfo + '\n'
            line3 = 'CPU 架构: ' + str(platform.machine()) + '\n'
            line4 = '内存使用: ' + str(memuse / 1024) + ' Mb' + '\n'
            line5 = '内存总量: ' + str(memtotal / 1024) + ' Mb' + '\n'
            line6 = 'CPU 型号: ' + ' '.join(infos)+ '\n'
            line7 = '\n网卡信息:\n'

            line = line2 + line3 + line4 + line5 + line6 + line7
            filepath = backdir + '/systeminfo.txt'
            # os.system("touch %s | echo '%s' >>%s | ifconfig >> %s | echo '\n硬盘信息:\n' >>%s |fdisk -l >> %s |  echo '\n分区信息:\n' >>%s | df -TH >> %s" % (filepath,line,filepath,filepath,filepath,filepath,filepath,filepath))

            os.system("touch %s | echo '%s' >>%s " % (filepath, line, filepath))

            logging.info('创建信息文件：%s' % filepath)

            os.system("ifconfig >> %s " % filepath)
            os.system("echo '\n硬盘信息:' >>%s" % filepath)
            os.system("fdisk -l >> %s " % filepath)
            os.system("echo '\n分区信息:\n' >>%s" % filepath)
            os.system("df -TH >> %s" % (filepath))
            self.extrainfo(filepath)
            logging.info('系统信息文件 结束')
        except Exception, e:
            print e
            logging.debug(e)
            pass

    def extrainfo(self, filepath):
        try:
            # 外网ip地址
            p = subprocess.Popen("curl icanhazip.com -s", stdout=subprocess.PIPE, shell=True)
            ret = p.communicate()
            ippath = str(ret[0].replace('\n', '').replace('\r', '')).strip()
            p = subprocess.Popen("echo '\n外网ip地址：\n %s \n'>> %s" % (ippath,filepath), stdout=subprocess.PIPE, shell=True)
                # os.system("echo 外网ip地址：\n>> %s" % (filepath))
                # os.system("echo %s\n>> %s" % (ippath, filepath))
            # 北京时间
            p = subprocess.Popen("curl --get --include  'http://apis.baidu.com/3023/time/time' -s -H 'apikey:%s' --connect-timeout 10 | grep stime" % apikey,
                                     stdout=subprocess.PIPE, stderr=subprocess.PIPE,shell=True)
            ret = p.communicate()
            beijing = ''
            if ret:
                for info in set(re.sub(r' ', '', ret[0]).split('\n')):
                    if info:
                        if info.startswith('{'):
                            beijing = eval(info)['stime']
            if beijing:
                t = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(int(beijing)))
                p = subprocess.Popen("echo '北京时间：\n %s' >> %s" % (t.strip(), filepath), stdout=subprocess.PIPE, shell=True)
                # os.system("echo '时间：\n %s' >> %s" % (t, filepath))
            else:
                # os.system("echo 时间：\n>> %s" % (filepath))
                # os.system("date >> %s" % (filepath))
                p = subprocess.Popen("echo '北京时间：\n'>> %s" % (filepath), stdout=subprocess.PIPE, shell=True)
                p = subprocess.Popen("date >> %s" % (filepath), stdout=subprocess.PIPE, shell=True)
        except Exception,e:
            logging.debug(e)
            print e
qq = QQ()
